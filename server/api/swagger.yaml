---
swagger: "2.0"
info:
  description: "This is the library store server for manage books, authors and reservations"
  version: "1.0.0"
  title: "Library store"
  termsOfService: "http://abey-calabro.heroku.com"
  contact:
    email: "apiteam@abey-calabro.heroku.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "book"
  description: "Everything about the library store books"
- name: "author"
  description: "Everything about the library store authors"
- name: "genre"
  description: "Everything about the library store genres"
- name: "event"
  description: "Everything about the library store events"
- name: "theme"
  description: "Everything about the library store themes"
- name: "review"
  description: "Everything about the library store book reviews"
- name: "cart"
  description: "Everything about users' cart"
- name: "user"
  description: "Everything about the library store registered users"
schemes:
- "https"
- "http"
paths:
  /book/findByTitle:
    get:
      tags:
      - "book"
      summary: "Finds book by title"
      description: "Only one title can be provide for a request"
      operationId: "findBookByTitle"
      produces:
      - "application/json"
      parameters:
      - name: "title"
        in: "query"
        description: "Title value that need to be considered for filter"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid Title value"
      x-swagger-router-controller: "Book"
  /book/findByGenres:
    get:
      tags:
      - "book"
      summary: "Finds books by genres"
      description: "Muliple genres can be provided with comma separated strings. Use\
        \         genre1, genre2, genre3 for testing."
      operationId: "findBooksByGenre"
      produces:
      - "application/json"
      parameters:
      - name: "genres"
        in: "query"
        description: "Genres to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid genre value"
      x-swagger-router-controller: "Book"
  /book/findByThemes:
    get:
      tags:
      - "book"
      summary: "Finds books by themes"
      description: "Muliple themes can be provided with comma separated strings. Use\
        \         theme1, theme2, theme3 for testing."
      operationId: "findBooksByTheme"
      produces:
      - "application/json"
      parameters:
      - name: "themes"
        in: "query"
        description: "Themes to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid theme value"
      x-swagger-router-controller: "Book"
  /book/findByAuthor:
    get:
      tags:
      - "book"
      summary: "Finds books by author"
      description: "Author can be provied by his Id. You can provide only one author\
        \ for a request"
      operationId: "findBooksByAuthor"
      produces:
      - "application/json"
      parameters:
      - name: "authors"
        in: "query"
        description: "Author to filter by"
        required: true
        type: "integer"
        format: "int32"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid author values"
      x-swagger-router-controller: "Book"
  /book/{ISBN}:
    get:
      tags:
      - "book"
      summary: "Find book by ISBN"
      description: "Returns a single book"
      operationId: "getBookByISBN"
      produces:
      - "application/json"
      parameters:
      - name: "ISBN"
        in: "path"
        description: "ISBN of book to return"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ISBN supplied"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"
  /books:
    get:
      tags:
      - "book"
      summary: "Get all books"
      description: "Return all books in the DB"
      operationId: "getBooks"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Book"
      x-swagger-router-controller: "Book"
  /authors:
    get:
      tags:
      - "author"
      summary: "Get all authors"
      description: "Return all authors in the DB"
      operationId: "getAuthors"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Author"
      x-swagger-router-controller: "Author"
  /author/findByName:
    get:
      tags:
      - "author"
      summary: "Get authors by name"
      description: "Return all authors by a specific name"
      operationId: "getAuthorsByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Author"
        400:
          description: "Invalid name value"
      x-swagger-router-controller: "Author"
  /genres:
    get:
      tags:
      - "genre"
      summary: "Get all genres"
      description: "Return all genres in the DB"
      operationId: "getGenres"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Genre"
      x-swagger-router-controller: "Genre"
  /genre/findByName:
    get:
      tags:
      - "genre"
      summary: "Get genres by name"
      description: "Return all genres by a specific name"
      operationId: "getGenresByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Genre"
        400:
          description: "Invalid name value"
      x-swagger-router-controller: "Genre"
  /themes:
    get:
      tags:
      - "theme"
      summary: "Get all themes"
      description: "Return all themes in the DB"
      operationId: "getThemes"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Theme"
      x-swagger-router-controller: "Theme"
  /theme/findByName:
    get:
      tags:
      - "theme"
      summary: "Get genres by theme"
      description: "Return all themes by a specific name"
      operationId: "getThemesByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Theme"
        400:
          description: "Invalid name value"
      x-swagger-router-controller: "Theme"
  /events:
    get:
      tags:
      - "event"
      summary: "Get all events"
      description: "Return all events in the DB"
      operationId: "getEvents"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"
  /event/findByName:
    get:
      tags:
      - "event"
      summary: "Get event by name"
      description: "Return all event by a specific name"
      operationId: "getEventsByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid name value"
      x-swagger-router-controller: "Event"
  /event/findByBook:
    get:
      tags:
      - "event"
      summary: "Get the event by presented book"
      description: "Return all event in which is presented a specific book"
      operationId: "getEventsByBook"
      produces:
      - "application/json"
      parameters:
      - name: "ISBN"
        in: "query"
        description: "The book ISBN to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ISBN value"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Event"
  /review/findByBook:
    get:
      tags:
      - "review"
      summary: "All the reviews of a book"
      description: "Return all reviews of a specific book"
      operationId: "getReviewsByBook"
      produces:
      - "application/json"
      parameters:
      - name: "ISBN"
        in: "query"
        description: "The book ISBN to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "Start offset"
        required: false
        type: "integer"
        format: "int32"
      - name: "lenght"
        in: "query"
        description: "Result lenght"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Review"
        400:
          description: "Invalid ISBN value"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Review"
  /review:
    post:
      tags:
      - "review"
      summary: "Create review"
      description: "Add a review for a specific book"
      operationId: "createReview"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "review"
        description: "The review object"
        required: true
        schema:
          $ref: "#/definitions/Review"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Model not valid"
        404:
          description: "Book or user not found"
      x-swagger-router-controller: "Review"
  /cart/findByUser:
    get:
      tags:
      - "cart"
      summary: "Get the user cart"
      description: "Get the cart of a specific user"
      operationId: "findCartByUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The username of the user cart"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid username value"
        404:
          description: "User not found"
      x-swagger-router-controller: "Cart"
  /cart/AddBook:
    post:
      tags:
      - "cart"
      summary: "Create cart element"
      description: "Add an element to current user cart"
      operationId: "createCartElement"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "cart"
        description: "The cart element object"
        required: true
        schema:
          $ref: "#/definitions/Cart"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Model not valid"
        404:
          description: "User not found"
      x-swagger-router-controller: "Cart"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
definitions:
  Genre:
    type: "object"
    properties:
      name:
        type: "string"
    example:
      name: "name"
  Theme:
    type: "object"
    properties:
      name:
        type: "string"
    example:
      name: "name"
  Author:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      photo:
        type: "string"
      bio:
        type: "string"
    example:
      photo: "photo"
      bio: "bio"
      id: 0
  Event:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      location:
        type: "string"
      date:
        type: "string"
        format: "date"
      description:
        type: "string"
      book:
        $ref: "#/definitions/Book"
    example:
      date: "2000-01-23"
      book:
        themes:
        - name: "name"
        - name: "name"
        editor: "Mondadori"
        ePrice: 5.962134
        pageNumber: 6
        ISBN: "ISBN"
        releaseDate: "2000-01-23"
        genres:
        - name: "name"
        - name: "name"
        price: 1.4658129
        language: "english"
        synopsis: "synopsis"
        title: "Harry Potter"
        authors:
        - photo: "photo"
          bio: "bio"
          id: 0
        - photo: "photo"
          bio: "bio"
          id: 0
      name: "name"
      description: "description"
      location: "location"
      id: 0
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
      address:
        type: "string"
      postalCode:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      phone:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      country: "country"
      password: "password"
      address: "address"
      city: "city"
      phone: "phone"
      postalCode: "postalCode"
      id: 6
      email: "email"
      username: "username"
  Book:
    type: "object"
    properties:
      ISBN:
        type: "string"
      genres:
        type: "array"
        items:
          $ref: "#/definitions/Genre"
      themes:
        type: "array"
        items:
          $ref: "#/definitions/Theme"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/Author"
      title:
        type: "string"
        example: "Harry Potter"
      editor:
        type: "string"
        example: "Mondadori"
      releaseDate:
        type: "string"
        format: "date"
      synopsis:
        type: "string"
      language:
        type: "string"
        example: "english"
      pageNumber:
        type: "integer"
        format: "int32"
      price:
        type: "number"
        format: "float"
      ePrice:
        type: "number"
        format: "float"
    example:
      themes:
      - name: "name"
      - name: "name"
      editor: "Mondadori"
      ePrice: 5.962134
      pageNumber: 6
      ISBN: "ISBN"
      releaseDate: "2000-01-23"
      genres:
      - name: "name"
      - name: "name"
      price: 1.4658129
      language: "english"
      synopsis: "synopsis"
      title: "Harry Potter"
      authors:
      - photo: "photo"
        bio: "bio"
        id: 0
      - photo: "photo"
        bio: "bio"
        id: 0
  Review:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        $ref: "#/definitions/User"
      book:
        $ref: "#/definitions/Book"
      rate:
        type: "integer"
        format: "int32"
      content:
        type: "string"
      date:
        type: "string"
        format: "date"
    example:
      date: "2000-01-23"
      rate: 1
      book:
        themes:
        - name: "name"
        - name: "name"
        editor: "Mondadori"
        ePrice: 5.962134
        pageNumber: 6
        ISBN: "ISBN"
        releaseDate: "2000-01-23"
        genres:
        - name: "name"
        - name: "name"
        price: 1.4658129
        language: "english"
        synopsis: "synopsis"
        title: "Harry Potter"
        authors:
        - photo: "photo"
          bio: "bio"
          id: 0
        - photo: "photo"
          bio: "bio"
          id: 0
      id: 0
      user:
        firstName: "firstName"
        lastName: "lastName"
        country: "country"
        password: "password"
        address: "address"
        city: "city"
        phone: "phone"
        postalCode: "postalCode"
        id: 6
        email: "email"
        username: "username"
      content: "content"
  Cart:
    type: "object"
    properties:
      book:
        $ref: "#/definitions/Book"
      user:
        $ref: "#/definitions/User"
      quantity:
        type: "integer"
        format: "int32"
