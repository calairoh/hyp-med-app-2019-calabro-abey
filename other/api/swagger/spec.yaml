---
swagger: "2.0"
info:
  description: "This is the festival server for manage events, performers and seminars"
  version: "1.0.0"
  title: "Festival store"
  termsOfService: "http://abey-calabro.heroku.com"
  contact:
    email: "apiteam@abey-calabro.heroku.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "Event"
  description: "Everything about the festival store events"
- name: "Performer"
  description: "Everything about the festival store performers"
- name: "Seminar"
  description: "Everything about the festival store seminars"
- name: "Booking"
  description: "Everything about users' booking"
- name: "User"
  description: "Everything about the library store registered users"
schemes:
- "http"
paths:
  /event/getTypes:
    get:
      tags:
      - "Event"
      summary: "Get all event types"
      description: "Return all the event types"
      operationId: "getTypes"
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              type: "string"
      x-swagger-router-controller: "Event"
  /event/findByType:
    get:
      tags:
      - "Event"
      summary: "Finds event by type"
      description: "Return all the events that have the argument type"
      operationId: "findByType"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "query"
        description: "The type you are looking for"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"
  /event/findByDate:
    get:
      tags:
      - "Event"
      summary: "Finds events by date"
      description: "Returns all the events that will be presented in the passed date range"
      operationId: "findByDate"
      produces:
      - "application/json"
      parameters:
      - name: "start"
        in: "query"
        description: "The range start date"
        required: true
        type: "string"
        format: "date"
      - name: "end"
        in: "query"
        description: "The range end date"
        required: true
        type: "string"
        format: "date"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EventPerformer"
      x-swagger-router-controller: "Event"
  /event/findByPerformer:
    get:
      tags:
      - "Event"
      summary: "Finds events by performer"
      description: "Return all events performed by a specific artist"
      operationId: "findByPerformer"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "The performer ID"
        required: true
        type: "integer"
        format: "int32"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/EventPerformer"
      x-swagger-router-controller: "Event"
  /event/findBySeminar:
    get:
      tags:
      - "Event"
      summary: "Finds events by seminar"
      description: "Return all events discussed in a specific seminar"
      operationId: "findBySeminar"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "The seminar ID"
        required: true
        type: "integer"
        format: "int32"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"
  /event/{ID}:
    get:
      tags:
      - "Event"
      summary: "Find event by ID"
      description: "Returns the single event with the passed ID"
      operationId: "getByID"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "path"
        description: "The event ID"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/EventSeminar"
      x-swagger-router-controller: "Event"
  /events:
    get:
      tags:
      - "Event"
      summary: "Get all events"
      description: "Return all events in the store"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"
  /performers:
    get:
      tags:
      - "Performer"
      summary: "Get all performers"
      description: "Return all performers in the store"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Performer"
      x-swagger-router-controller: "Performer"
  /performer/findByEvent:
    get:
      tags:
      - "Performer"
      summary: "Get performers by event"
      description: "Return all performers that perform an event"
      operationId: "findByEvent"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "The event ID"
        required: true
        type: "integer"
        format: "int32"
        minimum: 0
      responses:
        200:
          description: "Successfull operation"
          schema:
            type: "array"
            items:
              type: "array"
              items:
                $ref: "#/definitions/PerformerEventSeminar"
      x-swagger-router-controller: "Performer"
  /performer/{id}:
    get:
      tags:
      - "Performer"
      summary: "Get performer by ID"
      description: "Return performer by ID"
      operationId: "getByID"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "The performer ID"
        required: true
        type: "integer"
        format: "int32"
        minimum: 0
      responses:
        200:
          description: "Successfull operation"
          schema:
            $ref: "#/definitions/Performer"
      x-swagger-router-controller: "Performer"
  /seminars:
    get:
      tags:
      - "Seminar"
      summary: "Get all seminars"
      description: "Return all seminars in the store"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Seminar"
      x-swagger-router-controller: "Seminar"
  /seminar/{ID}:
    get:
      tags:
      - "Seminar"
      summary: "Get seminar by ID"
      description: "Return seminar by ID"
      operationId: "getByID"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "path"
        description: "The seminar ID"
        required: true
        type: "integer"
        format: "int32"
        minimum: 0
      responses:
        200:
          description: "Successfull operation"
          schema:
            $ref: "#/definitions/Seminar"
      x-swagger-router-controller: "Seminar"
  /booking/findByUser:
    get:
      tags:
      - "Booking"
      summary: "Get the user bookings"
      description: "Get all bookings of a specific user"
      operationId: "findByUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
      x-swagger-router-controller: "Booking"
  /booking/add/{ID}:
    post:
      tags:
      - "Booking"
      summary: "Add reservation"
      description: "Add a reservation to an event for the current user"
      operationId: "add"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "ID"
        description: "The event ID you want to book"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
      x-swagger-router-controller: "Booking"
  /user:
    post:
      tags:
      - "User"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/logged:
    get:
      tags:
      - "User"
      summary: "Get current user info"
      description: "Return the info of logged user, if exists"
      operationId: "getUserLoggedInfo"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "User"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "loginObj"
        in: "body"
        description: "The object containing username and password for login"
        required: true
        schema: 
          $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "User"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
definitions:
  PerformerEventSeminar:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      photo:
        type: "string"
      bio:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
      eventId:
        type: "integer"
        format: "int64"
      seminarId:
        type: "integer"
        format: "int64"
    example:
      photo: "Photo"
      bio: "Umberto Eco was born in Italy"
      name: "Umberto"
      surname: "Eco"
      id: 1
      eventId: 1
      seminarId: 1  
  Performer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      photo:
        type: "string"
      bio:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
    example:
      Photo: "Photo"
      Bio: "Umberto Eco was born in Italy"
      Name: "Umberto"
      Surname: "Eco"
      Id: 1
  UserLogin:
    type: "object"
    properties:
      username:
        type: "string"
      password:
        type: "string"
        format: "password"
    example:      
      username: "admin"
      password: "admin"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
      address:
        type: "string"
      postalCode:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      phone:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      country: "country"
      password: "password"
      address: "address"
      city: "city"
      phone: "phone"
      postalCode: "postalCode"
      id: 6
      email: "email"
      username: "username"
  EventSeminar:
    type: "object"
    properties:
      ID:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      image:
        type: "string"
      name:
        type: "string"
      location:
        type: "string"
      date:
        type: "string"
        format: "date"
      description:
        type: "string"
      seminarId:
        type: "integer"
        format: "int32"
      seminarName:
        type: "string"
  Event:
    type: "object"
    properties:
      ID:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      image:
        type: "string"
      name:
        type: "string"
      location:
        type: "string"
      date:
        type: "string"
        format: "date"
      description:
        type: "string"
      seminarId:
        type: "integer"
        format: "int32"
  EventPerformer:
    type: "object"
    properties:
      ID:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      image:
        type: "string"
      name:
        type: "string"
      location:
        type: "string"
      date:
        type: "string"
        format: "date"
      description:
        type: "string"
      seminarId:
        type: "integer"
        format: "int32"
      performerId:
        type: "integer"
        format: "int64"
      photo:
        type: "string"
      bio:
        type: "string"
      performerName:
        type: "string"
      performerSurname:
        type: "string"
  Booking:
    type: "object"
    properties:
      event:
        $ref: "#/definitions/Event"
      user:
        $ref: "#/definitions/User"
  Seminar:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      image:
        type: "string"
      name:
        type: "string"
      start:
        type: "string"
        format: "date"
      end: 
        type: "string"
        format: "date"
      location:
        type: "string"
      description:
        type: "string"
  Response:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      msg:
        type: "string"
