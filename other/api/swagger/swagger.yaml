---
swagger: "2.0"
info:
  description: "This is the festival server for manage events, performers and seminars"
  version: "1.0.0"
  title: "Festival store"
  termsOfService: "http://abey-calabro.heroku.com"
  contact:
    email: "apiteam@abey-calabro.heroku.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v1"
tags:
- name: "event"
  description: "Everything about the festival store events"
- name: "performer"
  description: "Everything about the festival store performers"
- name: "seminar"
  description: "Everything about the festival store seminars"
- name: "booking"
  description: "Everything about users' booking"
- name: "user"
  description: "Everything about the library store registered users"
schemes:
- "http"
paths:
  /event/findByName:
    get:
      tags:
      - "event"
      summary: "Finds event by name"
      description: "Return all the events that match the passed name"
      operationId: "findByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name of the event you are looking for"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid name value"
      x-swagger-router-controller: "Event"
  /event/findByDate:
    get:
      tags:
      - "event"
      summary: "Finds events by date"
      description: "Returns all the events that will be presented in the passed date range"
      operationId: "findByDate"
      produces:
      - "application/json"
      parameters:
      - name: "start"
        in: "query"
        description: "The range start date"
        required: true
        type: "string"
        format: "date"
      - name: "end"
        in: "query"
        description: "The range end date"
        required: true
        type: "string"
        format: "date"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid date range value"
      x-swagger-router-controller: "Event"
  /event/findByPerformer:
    get:
      tags:
      - "event"
      summary: "Finds events by performer"
      description: "Return all events performed by a specific artist"
      operationId: "findByPerformer"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "The performer ID"
        required: true
        type: "integer"
        format: "int32"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Invalid performer ID"
      x-swagger-router-controller: "Event"
  /event/{ID}:
    get:
      tags:
      - "ID"
      summary: "Find event by ID"
      description: "Returns the single event with the passed ID"
      operationId: "getByID"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "path"
        description: "The event ID"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ID"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
  /events:
    get:
      tags:
      - "event"
      summary: "Get all events"
      description: "Return all events in the store"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Event"
      x-swagger-router-controller: "Event"
  /performers:
    get:
      tags:
      - "performer"
      summary: "Get all performers"
      description: "Return all performers in the store"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Performer"
      x-swagger-router-controller: "Performer"
  /performer/findByEvent:
    get:
      tags:
      - "performer"
      summary: "Get performers by event"
      description: "Return all performers that perform an event"
      operationId: "findByEvent"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "query"
        description: "The event ID"
        required: true
        type: "integer"
        format: "int32"
        minimum: 0
      responses:
        200:
          description: "Successfull operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Performer"
        400:
          description: "Event ID not valid"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Author"
  /performer/{ID}:
    get:
      tags:
      - "performer"
      summary: "Get performer by ID"
      description: "Return performer by ID"
      operationId: "getByID"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "path"
        description: "The performer ID"
        required: true
        type: "integer"
        format: "int32"
        minimum: 0
      responses:
        200:
          description: "Successfull operation"
          schema:
            $ref: "#/definitions/Performer"
        400:
          description: "ID not valid"
        404:
          description: "Performer not found"
      x-swagger-router-controller: "Performer"
  /seminars:
    get:
      tags:
      - "seminars"
      summary: "Get all seminars"
      description: "Return all seminars in the store"
      operationId: "getAll"
      produces:
      - "application/json"
      parameters:
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Seminar"
      x-swagger-router-controller: "Seminar"
  /seminar/findByName:
    get:
      tags:
      - "seminar"
      summary: "Get seminar by name"
      description: "Return all the seminars that match the passed name"
      operationId: "getByName"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "query"
        description: "The name to filter by"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Seminar"
        400:
          description: "Invalid seminar name"
      x-swagger-router-controller: "Seminar"
  /seminar/findByEvent:
    get:
      tags:
      - "seminar"
      summary: "Get the seminar by discussed event"
      description: "Return the seminar in which is discussed a specific artist event"
      operationId: "findByEvent"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "query"
        description: "The event ID"
        required: true
        type: "string"
      - name: "offset"
        in: "query"
        description: "The number of objects to skip"
        required: false
        type: "integer"
        format: "int32"
        minimum: 0
      - name: "limit"
        in: "query"
        description: "The number of objects to take"
        required: false
        type: "integer"
        format: "int32"
        minimum: 1
      responses:
        200:
          description: "successfull operation"
          schema:
            $ref: "#/definitions/Seminar"
        400:
          description: "Invalid ID"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Seminar"
  /seminar/{ID}:
    get:
      tags:
      - "seminar"
      summary: "Get seminar by ID"
      description: "Return seminar by ID"
      operationId: "getByID"
      produces:
      - "application/json"
      parameters:
      - name: "ID"
        in: "path"
        description: "The seminar ID"
        required: true
        type: "integer"
        format: "int32"
        minimum: 0
      responses:
        200:
          description: "Successfull operation"
          schema:
            $ref: "#/definitions/Seminar"
        400:
          description: "ID not valid"
        404:
          description: "Seminar not found"
      x-swagger-router-controller: "Seminar"
  /booking/findByUser:
    get:
      tags:
      - "booking"
      summary: "Get the user bookings"
      description: "Get all bookings of a specific user"
      operationId: "findByUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
        500:
          description: "No user logged"
      x-swagger-router-controller: "Booking"
  /booking/add/{ID}:
    post:
      tags:
      - "Booking"
      summary: "Add reservation"
      description: "Add a reservation to an event for the current user"
      operationId: "add"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "ID"
        description: "The event ID you want to book"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid event ID"
        404:
          description: "Event not found"
        500:
          description: "No user logged"
      x-swagger-router-controller: "Booking"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
          schema:
            type: "string"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
definitions:
  Performer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      photo:
        type: "string"
      bio:
        type: "string"
      name:
        type: "string"
      surname:
        type: "string"
    example:
      Photo: "Photo"
      Bio: "Umberto Eco was born in Italy"
      Name: "Umberto"
      Surname: "Eco"
      Id: 1
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
      address:
        type: "string"
      postalCode:
        type: "string"
      city:
        type: "string"
      country:
        type: "string"
      phone:
        type: "string"
    example:
      firstName: "firstName"
      lastName: "lastName"
      country: "country"
      password: "password"
      address: "address"
      city: "city"
      phone: "phone"
      postalCode: "postalCode"
      id: 6
      email: "email"
      username: "username"
  Event:
    type: "object"
    properties:
      ID:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      image:
        type: "string"
      name:
        type: "string"
      location:
        type: "string"
      date:
        type: "string"
        format: "date"
      description:
        type: "string"
      performers:
        type: "array"
          schema: "#/definitions/Performer"
  Booking:
    type: "object"
    properties:
      event:
        $ref: "#/definitions/Event"
      user:
        $ref: "#/definitions/User"
  Seminar:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int32"
      image:
        type: "string"
      name:
        type: "string"
      start:
        type: "string"
        format: "date"
      end: 
        type: "string"
        format: "date"
      location:
        type: "string"
      description:
        type: "string"
  Response:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
